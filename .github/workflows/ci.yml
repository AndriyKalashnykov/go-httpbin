name: ci

on:
  push:
  pull_request:

jobs:

#  builds:
#    timeout-minutes: 10
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        go-version: [1.21]
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Set up Go
#        uses: actions/setup-go@v4
#        with:
#          go-version: ${{ matrix.go-version }}
#
#      - name: Build
#        run: make build
#
#  tests:
#    strategy:
#      matrix:
#        os: [ubuntu-latest]
#        name: [unit]
#        go-version: [1.21]
#    runs-on: ${{ matrix.os }}
#    name: test (${{ matrix.name }}, ${{ matrix.os }})
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - name: Set up Go
#        uses: actions/setup-go@v4
#        with:
#          go-version: ${{ matrix.go-version }}
#          cache: true
#      - name: Set Go mod package cache
#        uses: actions/cache@v3
#        with:
#          path: ~/go/pkg/mod
#          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('tests/go.sum') }}
#
#      - name: Run [${{ matrix.name }} - ${{ matrix.os }}] tests
#        run: make test

  release-binaries:
    if: github.ref_type == 'tag'
    strategy:
      matrix:
        go-version: [ 1.21 ]
        os: [ ubuntu-22.04]
#    needs: [tests, builds]
    runs-on:  ${{ matrix.os }}
    steps:
      - name: Convert owner to lower case
        id: convert_owner
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: Set environment
        id: set_environment
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=PROJECT_PATH::${{github.workspace}}
          echo ::set-output name=GITHUB_USER::${{env.OWNER_LC}}
          echo ::set-output name=GITHUB_TOKEN::${{secrets.GITHUB_TOKEN}}
          echo ::set-output name=GOROOT::/opt/hostedtoolcache/go/1.21.1/x64

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.set_environment.outputs.VERSION }}
#          clean: false

      - name: test git repo
        run: |
          ls -al ${{steps.set_environment.outputs.PROJECT_PATH}}
          echo "------"
          ls -al ${{steps.set_environment.outputs.GOROOT}}
          git config --global --add safe.directory ${{steps.set_environment.outputs.PROJECT_PATH}}
          pwd
          git status
#          git init
#          git status

      - name: Build
        run: |
          make build
          pwd
          ls -al *

#      - name: Run
#        id: run_golang_cross
#        run: |
#          docker run --rm --privileged \
#          -v /var/run/docker.sock:/var/run/docker.sock \
#          -e GITHUB_USER=${{steps.set_environment.outputs.GITHUB_USER}} \
#          -e GITHUB_TOKEN=${{secrets.GITHUB_TOKEN}} \
#          -v ${{steps.set_environment.outputs.PROJECT_PATH}}:/src \
#          -w /src \
#          ghcr.io/gythialy/golang-cross:v1.21.3 --clean
#          -v ${{steps.set_environment.outputs.GOROOT}}/src:/go/src \

      - name: Install libraries for cross compilation
        run: |
          ./scripts/install-clang-17-ubuntu.sh
          ./scripts/install-cross-libs-ubuntu.sh

#      -
#        name: libssl1.1 => libssl1.0-dev for OSXCross
#        run: |
#          sudo apt-get install software-properties-common
#          sudo apt-add-repository -y ppa:rael-gc/rvm
#          sudo apt-get install -y libssl1.0-dev
      -
        name: OSXCross for CGO Support
        run: |
          mkdir ../../osxcross
          git clone https://github.com/AndriyKalashnykov/osxcross-target.git ../../osxcross/target

      - run: echo "/home/runner/work/osxcross/target/bin" >> $GITHUB_PATH

      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean --config .goreleaser-Linux.yml --config .goreleaser-Darwin-cross.yml
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

#  release-docker-images:
#    if: github.ref_type == 'tag'
#    needs: [tests, builds]
#    timeout-minutes: 10
#    runs-on: ubuntu-latest
#    env:
#      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
#    permissions:
#      packages: write
#      contents: read
#
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v4
#      with:
#        fetch-depth: 0
#
#    - name: Set up QEMU
#      uses: docker/setup-qemu-action@v3
#
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v3
#
#    - name: Cache Docker layers
#      uses: actions/cache@v3.3.2
#      with:
#        path: /tmp/.buildx-cache
#        key: ${{ runner.os }}-buildx-${{ github.sha }}
#        restore-keys: |
#          ${{ runner.os }}-buildx-
#
#    - name: Convert owner to lower case
#      run: |
#        echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
#      env:
#        OWNER: '${{ github.repository_owner }}'
#
#    - name: Login to image repository
#      uses: docker/login-action@v3
#      with:
#        registry: ghcr.io
#        username: ${{ github.actor }}
#        password: ${{ secrets.GH_ACCESS_TOKEN }}
#
#    - name: Docker meta
#      id: meta
#      uses: docker/metadata-action@v5
#      with:
#        images: ghcr.io/${{ env.OWNER_LC }}/go-httpbin
#        flavor: latest=true
#        tags: |
#          type=ref,event=branch
#          type=ref,event=pr
#          type=semver,pattern=v{{version}}
#
#    - name: Build and push
#      uses: docker/build-push-action@v5
#      with:
#        context: .
#        file: ./Dockerfile
#        platforms: linux/amd64
#        push: ${{ github.ref_type == 'tag' }}
#        cache-from: type=local,src=/tmp/.buildx-cache
#        cache-to: type=local,dest=/tmp/.buildx-cache
#        tags: ${{ steps.meta.outputs.tags }}
#        labels: ${{ steps.meta.outputs.labels }}
