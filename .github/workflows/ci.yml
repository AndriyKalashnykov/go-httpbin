name: ci

on:
  push:
  pull_request:

jobs:

  builds:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Build
        run: make build

  tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        name: [unit]
        go-version: [1.21]
    runs-on: ${{ matrix.os }}
    name: test (${{ matrix.name }}, ${{ matrix.os }})
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
      - name: Set Go mod package cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('tests/go.sum') }}

      - name: Run [${{ matrix.name }} - ${{ matrix.os }}] tests
        run: make test

  release-binaries:
    if: github.ref_type == 'tag'
    strategy:
      matrix:
        go-version: [ 1.21 ]
        os: [ ubuntu-latest]
    needs: [tests, builds]
    runs-on:  ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - env:
          GITHUB_USER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_PATH: ${{ github.workspace }}
        run: |
          echo ${PROJECT_PATH}
          echo $GOPATH
          docker run --rm --privileged \
          -e GITHUB_USER=${GITHUB_USER} \
          -e GITHUB_TOKEN=${GITHUB_TOKEN} \
          -v ${PROJECT_PATH}:/src \
          -v $GOPATH/src:/go/src \
          -w /src
          ghcr.io/gythialy/golang-cross:v1.21.3 --clean 

#  release-docker-images:
#    if: github.ref_type == 'tag'
#    needs: [tests, builds]
#    timeout-minutes: 10
#    runs-on: ubuntu-latest
#    env:
#      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
#    permissions:
#      packages: write
#      contents: read
#
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v4
#      with:
#        fetch-depth: 0
#
#    - name: Set up QEMU
#      uses: docker/setup-qemu-action@v3
#
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v3
#
#    - name: Cache Docker layers
#      uses: actions/cache@v3.3.2
#      with:
#        path: /tmp/.buildx-cache
#        key: ${{ runner.os }}-buildx-${{ github.sha }}
#        restore-keys: |
#          ${{ runner.os }}-buildx-
#
#    - name: Convert owner to lower case
#      run: |
#        echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
#      env:
#        OWNER: '${{ github.repository_owner }}'
#
#    - name: Login to image repository
#      uses: docker/login-action@v3
#      with:
#        registry: ghcr.io
#        username: ${{ github.actor }}
#        password: ${{ secrets.GH_ACCESS_TOKEN }}
#
#    - name: Docker meta
#      id: meta
#      uses: docker/metadata-action@v5
#      with:
#        images: ghcr.io/${{ env.OWNER_LC }}/go-httpbin
#        flavor: latest=true
#        tags: |
#          type=ref,event=branch
#          type=ref,event=pr
#          type=semver,pattern=v{{version}}
#
#    - name: Build and push
#      uses: docker/build-push-action@v5
#      with:
#        context: .
#        file: ./Dockerfile
#        platforms: linux/amd64
#        push: ${{ github.ref_type == 'tag' }}
#        cache-from: type=local,src=/tmp/.buildx-cache
#        cache-to: type=local,dest=/tmp/.buildx-cache
#        tags: ${{ steps.meta.outputs.tags }}
#        labels: ${{ steps.meta.outputs.labels }}
